trigger: none
#   branches:
#     include:
#       - release/*
#   tags:
#     include: ['*']
pr: none

resources:
  repositories:
    - repository: templates
      type: github
      name: microsoft/vscode-engineering
      ref: logging
      endpoint: Monaco

parameters:
  - name: publishExtension
    displayName: ðŸš€ Publish Extension
    type: boolean
    default: false

extends:
  template: azure-pipelines/extension/stable.yml@templates
  parameters:
    l10nSourcePaths: ./src
    l10nShouldProcess: false
    publishExtension: ${{ parameters.publishExtension }}
    buildPlatforms:
      - name: Linux
        vsceTarget: ''
      - name: Linux
        vsceTarget: 'web'
      - name: Linux
        packageArch: arm64
        vsceTarget: linux-arm64
      - name: Linux
        packageArch: arm
        vsceTarget: linux-armhf
      - name: Linux
        packageArch: x64
        vsceTarget: linux-x64
      - name: MacOS
        packageArch: arm64
        vsceTarget: darwin-arm64
      - name: MacOS
        packageArch: x64
        vsceTarget: darwin-x64
      - name: Windows
        packageArch: ia32
        vsceTarget: win32-ia32
      - name: Windows
        packageArch: x64
        vsceTarget: win32-x64
    buildSteps:

      - script: |
          echo 'Hello World' && echo $(packageArch) and $(vsceTarget)
        displayName: Install dependencies1

      - bash: echo "##vso[task.setvariable variable=OutputValue;isOutput=true]$(vsceTarget)"
        name: printVsceTarget

      - bash: echo $(printVsceTarget.OutputValue)
        name: Echo

      # - script: |
      #     echo 'Hello World' && echo $PACKAGEARCH && echo $VSCETARGET
      #   displayName: Install dependencies

      - script: |
          echo 'Hello World' && echo $(packageArch) and $(vsceTarget)
        displayName: Install dependencies2

      - bash: |
          echo "##vso[task.setvariable variable=Sauce;]$(vsceTarget)"
        target:
          settableVariables:
            - sauce
        name: SetVars
      - bash:
          echo "Sauce is $(sauce)"
        name: OutputVars

      - ${{ if or(eq(variables.vsceTarget, ''), contains(variables.vsceTarget, 'linux'), contains(variables.vsceTarget, 'web')) }}:
        - script: |
            echo "Inside"
          displayName: Install dependencies for zeromq.js1
            # sudo apt-get update
            # sudo apt-get install libpango1.0-dev libgif-dev
        #   condition: or(eq($(printVsceTarget.OutputValue), ''), contains($(printVsceTarget.OutputValue), 'linux'), contains($(printVsceTarget.OutputValue), 'web'))

      - script: |
          echo "Inside 1"
        displayName: Install dependencies for zeromq.js1a
        # sudo apt-get update
        # sudo apt-get install libpango1.0-dev libgif-dev
        condition: or(eq(variables.sauce, ''), contains(variables.sauce, 'linux'), contains(variables.sauce, 'web'))

      - ${{ if or(eq(variables.sauce, ''), contains(variables.sauce, 'linux'), contains(variables.sauce, 'web')) }}:
        - script: |
            echo "Inside"
          displayName: Install dependencies for zeromq.js2
            # sudo apt-get update
            # sudo apt-get install libpango1.0-dev libgif-dev
        #   condition: or(eq($(printVsceTarget.OutputValue), ''), contains($(printVsceTarget.OutputValue), 'linux'), contains($(printVsceTarget.OutputValue), 'web'))

    #   - script: npm i -g npm@8.15.1
    #     displayName: Install npm 8.15.1

    #   - script: npm ci --foreground-scripts
    #     displayName: Install dependencies
    #     env:
    #       npm_config_arch: ${{ variables.packageArch }}
    #       npm_config_build_from_source: true
    #       VSC_PACKAGE_ARCH: $(packageArch)
    #       VSC_VSCE_TARGET: $(vsceTarget)

    #   - script: gulp clean
    #     displayName: Clean

    #   - task: UsePythonVersion@0
    #     inputs:
    #       versionSpec: '3.8'
    #       addToPath: true
    #       architecture: 'x64'

    #   - script: python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r ./requirements.txt
    #     displayName: Install Python libs

    #   - script: npm run updateBuildNumber
    #     displayName: Update build number

    #   - script: npm run prePublishBundleStable
    #     displayName: Build
    #     env:
    #       VSC_PACKAGE_ARCH: $(packageArch)
    #       VSC_VSCE_TARGET: $(vsceTarget)
